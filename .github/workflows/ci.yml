name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  AI_ENGINE_IMAGE_NAME: ${{ github.repository }}/ai-engine
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # Frontend CI
  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      run: npm run test:ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  # Backend CI
  backend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      run: |
        black --check .
        isort --check-only .
        mypy .

    - name: Run tests
      env:
        MONGODB_URL: mongodb://admin:password@localhost:27017/test?authSource=admin
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key
        DATABASE_URL: mongodb://admin:password@localhost:27017/devopspilot?authSource=admin
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        directory: ./backend
        flags: backend
        name: backend-coverage

  # AI Engine CI
  ai-engine-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-engine

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-ai-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-ai-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      run: |
        black --check .
        flake8 .
        mypy .

    - name: Run tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./ai-engine/coverage.xml
        directory: ./ai-engine
        flags: ai-engine
        name: ai-engine-coverage

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci, ai-engine-ci]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Build and push Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: [frontend-ci, backend-ci, ai-engine-ci]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        component: [backend, ai-engine, frontend]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Download frontend build artifacts
      if: matrix.component == 'frontend'
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}-staging

    - name: Deploy to staging
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|BACKEND_IMAGE_TAG|${{ github.sha }}|g" infrastructure/kubernetes/deployment.yaml
        sed -i "s|AI_ENGINE_IMAGE_TAG|${{ github.sha }}|g" infrastructure/kubernetes/deployment.yaml
        sed -i "s|FRONTEND_IMAGE_TAG|${{ github.sha }}|g" infrastructure/kubernetes/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f infrastructure/kubernetes/namespace.yaml
        kubectl apply -f infrastructure/kubernetes/deployment.yaml
        kubectl apply -f infrastructure/kubernetes/service.yaml
        kubectl apply -f infrastructure/kubernetes/ingress.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/devopspilot-backend -n devopspilot-staging --timeout=600s
        kubectl rollout status deployment/devopspilot-ai-engine -n devopspilot-staging --timeout=600s
        kubectl rollout status deployment/devopspilot-frontend -n devopspilot-staging --timeout=600s

    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=devopspilot-backend -n devopspilot-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=devopspilot-ai-engine -n devopspilot-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=devopspilot-frontend -n devopspilot-staging --timeout=300s
        
        # Get service URLs
        BACKEND_URL=$(kubectl get service devopspilot-backend -n devopspilot-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Run basic health checks
        curl -f http://${BACKEND_URL}/health || exit 1
        curl -f http://${BACKEND_URL}/api/docs || exit 1

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}-production

    - name: Deploy to production
      run: |
        # Update image tags in Kubernetes manifests
        sed -i "s|BACKEND_IMAGE_TAG|${{ github.sha }}|g" infrastructure/kubernetes/deployment.yaml
        sed -i "s|AI_ENGINE_IMAGE_TAG|${{ github.sha }}|g" infrastructure/kubernetes/deployment.yaml
        sed -i "s|FRONTEND_IMAGE_TAG|${{ github.sha }}|g" infrastructure/kubernetes/deployment.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f infrastructure/kubernetes/namespace.yaml
        kubectl apply -f infrastructure/kubernetes/deployment.yaml
        kubectl apply -f infrastructure/kubernetes/service.yaml
        kubectl apply -f infrastructure/kubernetes/ingress.yaml
        
        # Rolling update with zero downtime
        kubectl rollout status deployment/devopspilot-backend -n devopspilot-production --timeout=600s
        kubectl rollout status deployment/devopspilot-ai-engine -n devopspilot-production --timeout=600s
        kubectl rollout status deployment/devopspilot-frontend -n devopspilot-production --timeout=600s

    - name: Run production smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=devopspilot-backend -n devopspilot-production --timeout=300s
        kubectl wait --for=condition=ready pod -l app=devopspilot-ai-engine -n devopspilot-production --timeout=300s
        kubectl wait --for=condition=ready pod -l app=devopspilot-frontend -n devopspilot-production --timeout=300s
        
        # Get service URLs
        BACKEND_URL=$(kubectl get service devopspilot-backend -n devopspilot-production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Run comprehensive health checks
        curl -f http://${BACKEND_URL}/health || exit 1
        curl -f http://${BACKEND_URL}/api/docs || exit 1

    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
